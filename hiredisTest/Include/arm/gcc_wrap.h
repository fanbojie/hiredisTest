/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_ARM_WRAP_H_
#define SWIG_ARM_WRAP_H_

class SwigDirector_T120_Object : public T120_Object, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_T120_Object(JNIEnv *jenv);
    virtual ~SwigDirector_T120_Object();
    virtual void add_reference();
    virtual void release_reference();
    virtual void assert_valid();
    virtual bool is_valid();
public:
    bool swig_overrides(int n) {
      return (n < 4 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<4> swig_override;
};

class SwigDirector_T120_Timer_Object : public T120_Timer_Object, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_T120_Timer_Object(JNIEnv *jenv);
    virtual ~SwigDirector_T120_Timer_Object();
    virtual void add_reference();
    virtual void release_reference();
    virtual void assert_valid();
    virtual bool is_valid();
    virtual void on_timer();
    virtual boolean schedule(uint32 time_elapse);
    virtual void schedule_cancel();
public:
    bool swig_overrides(int n) {
      return (n < 7 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<7> swig_override;
};

class SwigDirector_GCC_Client_Sink : public GCC_Client_Sink, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_GCC_Client_Sink(JNIEnv *jenv);
    virtual GCC_Error on_ping_confirm(boolean to_create, wbxConfId &conference_id, Transport_Address cb_address, Transport_Address gateway_address, Transport_Address top_cb_address, Ping_Result result);
    virtual GCC_Error on_conference_create_confirm(char *conference_name, char *conference_key, wbxConfId conference_id, GCC_Node_ID local_node_id, GCC_Node_ID sup_node_id, GCC_Node_ID top_node_id, uint16 num_of_resource, GCC_Resource **resource_list, GCC_Result result);
    virtual GCC_Error on_conference_join_confirm(char *conference_name, char *conference_key, wbxConfId conference_id, boolean conference_is_locked, GCC_Node_ID local_node_id, GCC_Node_ID sup_node_id, GCC_Node_ID top_node_id, uint16 num_of_resource, GCC_Resource **resource_list, GCC_Result result);
    virtual GCC_Error on_conference_disconnect_confirm(wbxConfId &conference_id, GCC_Result result);
    virtual GCC_Error on_conference_disconnect_indication(wbxConfId &conference_id, GCC_Reason reason, GCC_Node_ID disconnecting_node_id);
    virtual GCC_Error on_conference_terminate_confirm(wbxConfId &conference_id, GCC_Result result);
    virtual GCC_Error on_conference_terminate_indication(wbxConfId &conference_id, GCC_Node_ID requesting_node_id, GCC_Reason reason);
    virtual GCC_Error on_conference_lock_report_indication(wbxConfId &conference_id, boolean conference_is_locked);
    virtual GCC_Error on_conference_parameter_change_indication(wbxConfId &conference_id, uint16 num_of_resource, GCC_Resource_Update_Record **update_rsc_list);
    virtual GCC_Error on_conference_eject_user_confirm(wbxConfId &conference_id, GCC_Node_ID ejected_node_id, GCC_Result result);
    virtual GCC_Error on_conference_eject_user_indication(wbxConfId &conference_id, GCC_Node_ID ejected_node_id, GCC_Reason reason);
    virtual GCC_Error on_conference_announce_presence_confirm(wbxConfId &conference_id, GCC_Result result);
    virtual GCC_Error on_conference_roster_report_indication(wbxConfId &conference_id, uint16 number_of_total_nodes, uint16 number_of_node_instances, uint16 number_of_added_nodes, uint16 number_of_removed_nodes, GCC_Node_Record **node_list);
    virtual GCC_Error on_host_change_indication(wbxConfId &conference_id, uint32 host_node_id);
    virtual GCC_Error on_host_assign_confirm(wbxConfId &conference_id, uint32 recipient_node_id, GCC_Result result);
    virtual GCC_Error on_presentor_change_indication(wbxConfId &conference_id, uint32 presenter_node_id);
    virtual GCC_Error on_presentor_assign_confirm(wbxConfId &conference_id, uint32 recipient_node_id, GCC_Result result);
    virtual GCC_Error on_message_indication(wbxConfId &conference_id, GCC_Node_ID from_node_id, GCC_Node_ID dest_node_id, uint8 *message, uint32 message_length);
    virtual GCC_Error on_session_create_confirm(wbxConfId &conference_id, uint32 req_handle, GCC_Session_Key *session_key, uint16 num_of_resource, GCC_Resource **resource_list, GCC_Result result);
    virtual GCC_Error on_session_create_indication(wbxConfId &conference_id, GCC_Session_Key *session_key, uint16 num_of_resource, GCC_Resource **resource_list, GCC_Node_ID initiator_node);
    virtual GCC_Error on_session_close_indication(wbxConfId &conference_id, GCC_Session_Key *session_key, GCC_Reason reason);
    virtual GCC_Error on_flow_control_alarm(wbxConfId &conference_id, MCS_Node_ID initiator_node, uint16 number_of_nodes, MCS_Node_ID *node_list, uint16 number_of_priorities, MCS_Flow_Control_Alarm_Status *status);
    virtual GCC_Error on_misc_msg_indication(uint32 msg_type, uint32 msg_data);
    virtual GCC_Error on_channel_join_confirm(wbxConfId &conf_id, MCS_Channel_ID chan_id, GCC_Result result);
    virtual ~SwigDirector_GCC_Client_Sink();
    virtual GCC_Error on_namehandle_allocate_confirm(uint16 number_of_handles, NameHandle *name_handle_list, GCC_Result result);
    virtual GCC_Error on_cache_action_confirm_ex(uint32 cache_handle, CacheAction cache_action, uint32 reqeust_idx, uint32 cache_id, GCC_Result result);
    virtual GCC_Error on_cache_retrieve_confirm_ex(uint32 cache_handle, uint32 group_id, uint32 reqeust_idx, uint32 cache_id, CacheAction cache_action, GCC_Result result, MCS_Priority priority, uint8 *data, uint32 data_length);
public:
    bool swig_overrides(int n) {
      return (n < 27 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<27> swig_override;
};

class SwigDirector_JAVA_ARM_APE_Sink : public JAVA_ARM_APE_Sink, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_JAVA_ARM_APE_Sink(JNIEnv *jenv);
    virtual GCC_Error on_detach_indication(GCC_Session_Key *session_key, GCC_Reason reason);
    virtual GCC_Error on_session_enroll_confirm(GCC_Session_Key *session_key, GCC_Result result);
    virtual GCC_Error on_session_parameter_change_indication(GCC_Session_Key *session_key, uint16 num_of_resource, GCC_Resource_Update_Record **update_rsc_list);
    virtual GCC_Error on_data_indication(GCC_Session_Key *session_key, MCS_User_ID sender_id, MCS_Channel_ID channel_id, boolean uniform, MCS_Priority priority, uint8 *data, uint32 data_length);
    virtual GCC_Error on_data_indication_h264_data(GCC_Session_Key *session_key, MCS_User_ID sender_id, MCS_Channel_ID channel_id, MCS_Priority priority, uint8 *user_data, uint32 user_data_length, uint32 frame_tag, uint32 data_type);
    virtual GCC_Error on_data_indication_flv(GCC_Session_Key *session_key, MCS_User_ID sender_id, MCS_Channel_ID channel_id, boolean uniform, MCS_Priority priority, uint8 *data, uint32 data_length, uint32 tag_flag);
    virtual GCC_Error on_applicaiton_roster_report_indication(GCC_Session_Key *session_key, uint16 number_of_total_entities, uint16 number_of_entity_instances, uint16 number_of_added_entities, uint16 number_of_removed_entities, GCC_APE_Record **entity_list);
    virtual GCC_Error on_token_grab_confirm(MCS_Token_ID token_id, uint16 result);
    virtual GCC_Error on_token_inhibit_confirm(MCS_Token_ID token_id, uint16 result);
    virtual GCC_Error on_token_test_confirm(MCS_Token_ID token_id, uint16 result);
    virtual GCC_Error on_token_please_indication(MCS_Token_ID token_id, MCS_User_ID requestor);
    virtual GCC_Error on_token_give_indication(MCS_Token_ID token_id, MCS_User_ID sender_id);
    virtual GCC_Error on_token_give_confirm(MCS_Token_ID token_id, uint16 result);
    virtual GCC_Error on_handle_allocate_confirm(uint16 number_of_handles, uint32 handle_value, GCC_Result result);
    virtual GCC_Error on_cache_set_confirm(uint32 cache_handle, GCC_Result result);
    virtual GCC_Error on_cache_retrive_confirm(uint32 cache_handle, GCC_Result result, uint8 *data, uint32 data_length);
    virtual GCC_Error on_flow_control_send_ready();
    virtual GCC_Error on_misc_msg_indication(uint32 msg_type, uint32 msg_data);
    virtual GCC_Error on_data_indication_ex(GCC_Session_Key *session_key, MCS_User_ID sender_id, MCS_Channel_ID channel_id, boolean uniform, MCS_Priority priority, uint8 *data, uint32 data_length, uint8 *opt_data, uint32 opt_data_length);
    virtual GCC_Error on_namehandle_allocate_confirm(uint16 number_of_handles, NameHandle *name_handle_list, GCC_Result result);
    virtual GCC_Error on_cache_action_confirm_ex(uint32 cache_handle, CacheAction cache_action, uint32 reqeust_idx, uint32 cache_id, GCC_Result result);
    virtual GCC_Error on_cache_retrieve_confirm_ex(uint32 cache_handle, uint32 group_id, uint32 reqeust_idx, uint32 cache_id, CacheAction cache_action, GCC_Result result, MCS_Priority priority, uint8 *data, uint32 data_length);
    virtual ~SwigDirector_JAVA_ARM_APE_Sink();
public:
    bool swig_overrides(int n) {
      return (n < 22 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<22> swig_override;
};

class SwigDirector_JAVA_CAS_APE_Sink : public JAVA_CAS_APE_Sink, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_JAVA_CAS_APE_Sink(JNIEnv *jenv);
    virtual GCC_Error on_detach_indication(GCC_Session_Key *session_key, GCC_Reason reason);
    virtual GCC_Error on_data_indication_ex(GCC_Session_Key *session_key, MCS_User_ID sender_id, MCS_Channel_ID channel_id, boolean uniform, MCS_Priority priority, uint8 *user_data, uint32 user_data_length, uint8 *opt_data, uint32 opt_data_length);
    virtual GCC_Error on_data_indication(GCC_Session_Key *session_key, MCS_User_ID sender_id, MCS_Channel_ID channel_id, boolean uniform, MCS_Priority priority, uint8 *user_data, uint32 user_data_length);
    virtual GCC_Error on_enroll_confirm(GCC_Session_Key *session_key, GCC_Result result);
    virtual ~SwigDirector_JAVA_CAS_APE_Sink();
public:
    bool swig_overrides(int n) {
      return (n < 4 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<4> swig_override;
};


#endif
